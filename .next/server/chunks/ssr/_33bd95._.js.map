{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/ERP/erp_frontend/src/app/login/page.tsx"],"sourcesContent":["// \"use client\";\r\n// import { RxEyeClosed } from \"react-icons/rx\";\r\n// import Link from \"next/link\";\r\n// import { useState } from \"react\";\r\n// import useSWRMutation from \"swr/mutation\";\r\n// import { useRouter } from \"next/navigation\"; // For redirection\r\n// import { loginClient, loginAdmin, loginEmployee } from \"@/services/authService\"; // Import login functions\r\n// import { Button } from \"@/components/ui/button\";\r\n// import { Input } from \"@/components/ui/input\";\r\n// import { toast } from \"react-toastify\"; // Toast notification\r\n// import { TfiEye } from \"react-icons/tfi\";\r\n\r\n// export default function LoginPage() {\r\n//   const [formData, setFormData] = useState<{ username: string; password: string }>({\r\n//     username: \"\",\r\n//     password: \"\",\r\n//   });\r\n//   const [showPassword, setShowPassword] = useState(false); // Toggle for password visibility\r\n//   const [role, setRole] = useState(\"client\"); // Default role\r\n\r\n//   const router = useRouter();\r\n\r\n//   // Function to handle login based on role\r\n//   const loginFunction = async (credentials: { username: string; password: string }) => {\r\n//     if (role === \"client\") {\r\n//       return loginClient(credentials);\r\n//     } else if (role === \"admin\") {\r\n//       return loginAdmin(credentials);\r\n//     } else if (role === \"employee\") {\r\n//       // Fetch employee data (including the role) during login\r\n//       const employeeData = await loginEmployee(credentials);\r\n//       return employeeData; // This should contain role information, like \"Hr\" in your case\r\n//     }\r\n//   };\r\n\r\n//   // Login mutation\r\n//   const {\r\n//     trigger: login,\r\n//     isMutating: isLoading,\r\n//     error,\r\n//   } = useSWRMutation('login', async (_, { arg }) => {\r\n//     try {\r\n//       const data = await loginFunction(arg);\r\n      \r\n//       if (data.token) {\r\n//         localStorage.setItem(\"token\", data.token); // Store token\r\n//       }\r\n//       console.log(\"DATA\",data)\r\n      \r\n//       // Check if the user is an employee and has a role\r\n//       if (role === \"employee\") {\r\n//         toast.success(\"Login successful! Redirecting to employee dashboard\");\r\n//         router.push(`employee/${data.employee.role.toLowerCase()}/dashboard`); // Redirect based on the employee's role\r\n      \r\n//       } else {\r\n//         toast.success(\"Login successful! Redirecting to dashboard\");\r\n//         router.push(`${role}/dashboard`); // For admin or client login\r\n//       }\r\n\r\n//       return data;\r\n//     } catch (err) {\r\n//       toast.error(\"Login failed. Please try again.\");\r\n//       throw err; // This will trigger the error handling in SWRMutation\r\n//     }\r\n//   });\r\n\r\n//   // Handle form change\r\n//   const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   // Handle form submit with validation\r\n//   const handleSubmit = (e: React.FormEvent) => {\r\n//     e.preventDefault();\r\n\r\n//     // Check if username and password are filled\r\n//     if (!formData.username || !formData.password) {\r\n//       toast.error(\"Please fill out all required fields.\");\r\n//       return;\r\n//     }\r\n\r\n//     // Proceed to login if all fields are filled\r\n//     login(formData);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"flex items-center bg-gray-300 justify-center min-h-screen px-5\">\r\n//       <div className=\"max-w-lg w-full bg-white p-8 shadow-xl rounded-xl\">\r\n//         {/* Tabs section */}\r\n//         <div className=\"flex justify-around mb-6\">\r\n//           <button\r\n//             onClick={() => setRole(\"admin\")}\r\n//             className={`py-2 px-4 rounded ${role === \"admin\" ? \"bg-blue-500 text-white\" : \"bg-gray-200\"}`}\r\n//           >\r\n//             Admin\r\n//           </button>\r\n//           <button\r\n//             onClick={() => setRole(\"client\")}\r\n//             className={`py-2 px-4 rounded ${role === \"client\" ? \"bg-blue-500 text-white\" : \"bg-gray-200\"}`}\r\n//           >\r\n//             Client\r\n//           </button>\r\n//           <button\r\n//             onClick={() => setRole(\"employee\")}\r\n//             className={`py-2 px-4 rounded ${role === \"employee\" ? \"bg-blue-500 text-white\" : \"bg-gray-200\"}`}\r\n//           >\r\n//             Employee\r\n//           </button>\r\n//         </div>\r\n\r\n//         <h1 className=\"text-3xl font-bold mb-4 text-center\">\r\n//           Login\r\n//         </h1>\r\n\r\n//         <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n//           <Input\r\n//             name=\"username\"\r\n//             type=\"text\"\r\n//             placeholder={`Username`}\r\n//             value={formData.username}\r\n//             onChange={handleChange}\r\n//             required\r\n//           />\r\n\r\n//           <div className=\"relative\">\r\n//             <Input\r\n//               name=\"password\"\r\n//               type={showPassword ? \"text\" : \"password\"}\r\n//               placeholder=\"Password\"\r\n//               value={formData.password}\r\n//               onChange={handleChange}\r\n//               required\r\n//             />\r\n//             <button\r\n//               type=\"button\"\r\n//               onClick={() => setShowPassword(!showPassword)}\r\n//               className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\r\n//             >\r\n//               {showPassword ? <TfiEye /> : <RxEyeClosed />}\r\n//             </button>\r\n//           </div>\r\n\r\n//           <Button type=\"submit\" disabled={isLoading} className=\"w-full\">\r\n//             {isLoading ? \"Logging in...\" : \"Login\"}\r\n//           </Button>\r\n\r\n//           <div className=\"text-end\">\r\n//             <Link className=\"text-sm text-blue-600 underline hover:unset\" href=\"/forgotPassword\">\r\n//               Forgot Password\r\n//             </Link>\r\n//           </div>\r\n\r\n\r\n//           {role === \"client\" && (\r\n//             <p className=\"text-center mt-4\">\r\n//               Don't have an account?{\" \"}\r\n//               <a href=\"/register\" className=\"text-blue-600 underline hover:text-blue-800\">\r\n//                 Sign up\r\n//               </a>\r\n//             </p>\r\n//           )}\r\n//         </form>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// Import necessary modules\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport useSWR from 'swr';\r\nimport { Button, Input, Label } from 'shadcn-ui';\r\nimport axios from 'axios';\r\n\r\n// Function to fetch data using SWR\r\nconst fetcher = (url, payload) =>\r\n  axios.post(url, payload).then((res) => res.data);\r\n\r\nconst LoginPage = () => {\r\n  // Form setup using react-hook-form\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n  // SWR to handle login submission\r\n  const { data, error, mutate } = useSWR('/api/login', fetcher, {\r\n    revalidateOnFocus: false,\r\n    shouldRetryOnError: false,\r\n  });\r\n\r\n  // Submit handler for login form\r\n  const onSubmit = async (formData) => {\r\n    try {\r\n      const loginData = await mutate(formData);\r\n      console.log('Login successful', loginData);\r\n    } catch (err) {\r\n      console.error('Login failed', err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-md mx-auto p-4 bg-white shadow-md rounded-lg\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">Login</h1>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        {/* Name Field */}\r\n        <div className=\"mb-4\">\r\n          <Label htmlFor=\"name\">Username</Label>\r\n          <Input\r\n            id=\"name\"\r\n            placeholder=\"Enter your username\"\r\n            {...register('name', { required: 'Username is required' })}\r\n          />\r\n          {errors.name && (\r\n            <p className=\"text-red-500 text-sm\">{errors.name.message}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Password Field */}\r\n        <div className=\"mb-4\">\r\n          <Label htmlFor=\"password\">Password</Label>\r\n          <Input\r\n            id=\"password\"\r\n            type=\"password\"\r\n            placeholder=\"Enter your password\"\r\n            {...register('password', { required: 'Password is required' })}\r\n          />\r\n          {errors.password && (\r\n            <p className=\"text-red-500 text-sm\">{errors.password.message}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Submit Button */}\r\n        <Button type=\"submit\" className=\"w-full\">\r\n          Login\r\n        </Button>\r\n\r\n        {/* Error Message */}\r\n        {error && <p className=\"text-red-500 mt-4\">Login failed. Try again.</p>}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 308, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 319, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 319, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":["file://D%3A/ERP/erp_frontend/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport { AppPageRouteModule } from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\nimport { RouteKind } from '../../server/route-kind'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nexport { default as GlobalError } from 'VAR_MODULE_GLOBAL_ERROR'\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: any\ndeclare const __next_app_load_chunk__: any\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nexport * from '../../server/app-render/entry-base'\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n})\n"],"names":["AppPageRouteModule","RouteKind","tree","pages","default","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree"],"mappings":";;;;;;AAeA,cAAc;AAdd,SAASA,kBAAkB,QAAQ,2DAA2D;IAAE,wBAAwB;AAAW,EAAC;AAYpI,yEAAyE;AAKzE,SAASE,IAAI,EAAEC,KAAK,GAAE;AAStB,iCAAiC;;;;;;;;AAEjC,OAAO,MAAMG,eAAe,6CAAA;IAC1BC,MAAAA,GAASC;IACTC,EAAAA,OAAAA;IAAAA,CAAWC;IAAAA;QACb,EAAC,UAAA;YAAA;YAAA;gBAED,YAAA;oBAAA,CAAc;oBAAA,CAEd,yBAFkD;oBAElD,yDAA4D;wBAC5D,KAAO,KAAA,CAAMC;wBAAAA,QAAc;4BAAA,GAAIX,CAAAA,gBAAmB;4BAAA;yBAAA;;mBAChDY,YAAY;;iBACVC,MAAMZ,UAAUa,QAAQ;sBACxBC,IAAAA,CAAM,CAAA;YAAA;SAAA;;SACNC,UAAU;cACV,IAAA;YAAA,MAAA,4BAA2C;iBAC3CC,MAAAA,MAAY,EAAA;wBAAA;4BACZC,KAAAA,CAAAA,GAAAA,CAAU,0KAAVA,CAAAA,sBAAU,EAAA,MAAA,MAAA,MAAA,EAAA,iBAAA,CAAA,CAAA,EAAA,iTAAA,CAAA,UAAA,CAAA,GAAA,CAAA,KAAA,CAAA,KAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;4BACVC,OAAAA,qTAAU,EAAE,QAAA,CAAA,KAAA,CAAA,CAAA,EAAA,iTAAA,CAAA,UAAA,CAAA,MAAA,EAAA;4BACd,MAAA,CAAA,YAAA,CAAA;wBACAC;qBAAAA,MAAU;gBACRC,YAAYnB;UACd;QAAA,UAAA;YAAA,IAAA;YAAA;SAAA;QACF,CAAE,YAAA;YAAA,IAAA;YAAA;SAAA","ignoreList":[0]}},
    {"offset": {"line": 418, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}