{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file://D%3A/ERP/erp_frontend/src/app/login/page.tsx"],"sourcesContent":["// \"use client\";\r\n// import { RxEyeClosed } from \"react-icons/rx\";\r\n// import Link from \"next/link\";\r\n// import { useState } from \"react\";\r\n// import useSWRMutation from \"swr/mutation\";\r\n// import { useRouter } from \"next/navigation\"; // For redirection\r\n// import { loginClient, loginAdmin, loginEmployee } from \"@/services/authService\"; // Import login functions\r\n// import { Button } from \"@/components/ui/button\";\r\n// import { Input } from \"@/components/ui/input\";\r\n// import { toast } from \"react-toastify\"; // Toast notification\r\n// import { TfiEye } from \"react-icons/tfi\";\r\n\r\n// export default function LoginPage() {\r\n//   const [formData, setFormData] = useState<{ username: string; password: string }>({\r\n//     username: \"\",\r\n//     password: \"\",\r\n//   });\r\n//   const [showPassword, setShowPassword] = useState(false); // Toggle for password visibility\r\n//   const [role, setRole] = useState(\"client\"); // Default role\r\n\r\n//   const router = useRouter();\r\n\r\n//   // Function to handle login based on role\r\n//   const loginFunction = async (credentials: { username: string; password: string }) => {\r\n//     if (role === \"client\") {\r\n//       return loginClient(credentials);\r\n//     } else if (role === \"admin\") {\r\n//       return loginAdmin(credentials);\r\n//     } else if (role === \"employee\") {\r\n//       // Fetch employee data (including the role) during login\r\n//       const employeeData = await loginEmployee(credentials);\r\n//       return employeeData; // This should contain role information, like \"Hr\" in your case\r\n//     }\r\n//   };\r\n\r\n//   // Login mutation\r\n//   const {\r\n//     trigger: login,\r\n//     isMutating: isLoading,\r\n//     error,\r\n//   } = useSWRMutation('login', async (_, { arg }) => {\r\n//     try {\r\n//       const data = await loginFunction(arg);\r\n      \r\n//       if (data.token) {\r\n//         localStorage.setItem(\"token\", data.token); // Store token\r\n//       }\r\n//       console.log(\"DATA\",data)\r\n      \r\n//       // Check if the user is an employee and has a role\r\n//       if (role === \"employee\") {\r\n//         toast.success(\"Login successful! Redirecting to employee dashboard\");\r\n//         router.push(`employee/${data.employee.role.toLowerCase()}/dashboard`); // Redirect based on the employee's role\r\n      \r\n//       } else {\r\n//         toast.success(\"Login successful! Redirecting to dashboard\");\r\n//         router.push(`${role}/dashboard`); // For admin or client login\r\n//       }\r\n\r\n//       return data;\r\n//     } catch (err) {\r\n//       toast.error(\"Login failed. Please try again.\");\r\n//       throw err; // This will trigger the error handling in SWRMutation\r\n//     }\r\n//   });\r\n\r\n//   // Handle form change\r\n//   const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   // Handle form submit with validation\r\n//   const handleSubmit = (e: React.FormEvent) => {\r\n//     e.preventDefault();\r\n\r\n//     // Check if username and password are filled\r\n//     if (!formData.username || !formData.password) {\r\n//       toast.error(\"Please fill out all required fields.\");\r\n//       return;\r\n//     }\r\n\r\n//     // Proceed to login if all fields are filled\r\n//     login(formData);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"flex items-center bg-gray-300 justify-center min-h-screen px-5\">\r\n//       <div className=\"max-w-lg w-full bg-white p-8 shadow-xl rounded-xl\">\r\n//         {/* Tabs section */}\r\n//         <div className=\"flex justify-around mb-6\">\r\n//           <button\r\n//             onClick={() => setRole(\"admin\")}\r\n//             className={`py-2 px-4 rounded ${role === \"admin\" ? \"bg-blue-500 text-white\" : \"bg-gray-200\"}`}\r\n//           >\r\n//             Admin\r\n//           </button>\r\n//           <button\r\n//             onClick={() => setRole(\"client\")}\r\n//             className={`py-2 px-4 rounded ${role === \"client\" ? \"bg-blue-500 text-white\" : \"bg-gray-200\"}`}\r\n//           >\r\n//             Client\r\n//           </button>\r\n//           <button\r\n//             onClick={() => setRole(\"employee\")}\r\n//             className={`py-2 px-4 rounded ${role === \"employee\" ? \"bg-blue-500 text-white\" : \"bg-gray-200\"}`}\r\n//           >\r\n//             Employee\r\n//           </button>\r\n//         </div>\r\n\r\n//         <h1 className=\"text-3xl font-bold mb-4 text-center\">\r\n//           Login\r\n//         </h1>\r\n\r\n//         <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n//           <Input\r\n//             name=\"username\"\r\n//             type=\"text\"\r\n//             placeholder={`Username`}\r\n//             value={formData.username}\r\n//             onChange={handleChange}\r\n//             required\r\n//           />\r\n\r\n//           <div className=\"relative\">\r\n//             <Input\r\n//               name=\"password\"\r\n//               type={showPassword ? \"text\" : \"password\"}\r\n//               placeholder=\"Password\"\r\n//               value={formData.password}\r\n//               onChange={handleChange}\r\n//               required\r\n//             />\r\n//             <button\r\n//               type=\"button\"\r\n//               onClick={() => setShowPassword(!showPassword)}\r\n//               className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\r\n//             >\r\n//               {showPassword ? <TfiEye /> : <RxEyeClosed />}\r\n//             </button>\r\n//           </div>\r\n\r\n//           <Button type=\"submit\" disabled={isLoading} className=\"w-full\">\r\n//             {isLoading ? \"Logging in...\" : \"Login\"}\r\n//           </Button>\r\n\r\n//           <div className=\"text-end\">\r\n//             <Link className=\"text-sm text-blue-600 underline hover:unset\" href=\"/forgotPassword\">\r\n//               Forgot Password\r\n//             </Link>\r\n//           </div>\r\n\r\n\r\n//           {role === \"client\" && (\r\n//             <p className=\"text-center mt-4\">\r\n//               Don't have an account?{\" \"}\r\n//               <a href=\"/register\" className=\"text-blue-600 underline hover:text-blue-800\">\r\n//                 Sign up\r\n//               </a>\r\n//             </p>\r\n//           )}\r\n//         </form>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// Import necessary modules\r\n\"use client\"\r\nimport { useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport {  Button } from '@/components/ui/button'; \r\nimport {Input} from '@/components/ui/input'\r\nimport { loginService } from '@/services/authService';\r\n\r\nexport default function LoginForm() {\r\n  const [name, setName] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const router = useRouter();\r\n\r\n  const handleLogin = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await loginService({ name, password });\r\n\r\n      if (response.success) {\r\n        // Check the user's role and redirect accordingly\r\n        if (response.user.role === 'admin') {\r\n          router.push('/dashboard/admin');\r\n        } else if (response.user.role === 'employee_hr') {\r\n          router.push('/dashboard/employee-hr');\r\n        } else {\r\n          router.push('/dashboard/user');\r\n        }\r\n      }\r\n    } catch (err: any) {\r\n      setError('Invalid login credentials');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-form max-w-md mx-auto mt-10\">\r\n      <form onSubmit={handleLogin} className=\"space-y-4\">\r\n        <Input\r\n          type=\"text\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          placeholder=\"Username\"\r\n          className=\"w-full\"\r\n        />\r\n        <Input\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          placeholder=\"Password\"\r\n          className=\"w-full\"\r\n        />\r\n        {error && <p className=\"text-red-500\">{error}</p>}\r\n        <Button type=\"submit\" className=\"w-full bg-blue-500 text-white\">\r\n          Login\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 277, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}